
(import unittest (chicken base) (chicken pretty-print) (chicken condition))

(define-suite wasrun-sut
  ((setup tc)         (unittest/testcase-logcons! tc 'setup))
  ((teardown tc _)    (unittest/testcase-logcons! tc 'teardown))
  ((test-method tc _) (unittest/testcase-logcons! tc 'test-method))
  ((test-unbound-variable tc _) unbound-variable)
  ((test-broken tc _) (signal (unittest/condition-expected-actual 'useless '_))))

(define-suite bootstrap-sut
  ((setup tc) (lettest ((t 'test-method)) (values t (make-unittest/result 0 '()))))
  ((test-alist-ref tc t r) 
    (let ((alst '((a 3) (b 2))))
      (⊦= '(3) (alist-ref 'a alst))
      (⊦= '(2) (alist-ref 'b alst))
      (⊦= #f (alist-ref 'c alst))))
  ((test-running tc t r)
     (⊦= '() (unittest/testcase-log t))
     (unittest/testcase-run t r wasrun-sut)
     (⊦= '(teardown test-method setup) (unittest/testcase-log t)))
  ((test-result tc t r)
        (unittest/testcase-run t r wasrun-sut)
        (⊦= '((ran 1) (failed 0)) (unittest/result-summary r)))
  ((test-failed tc _ r)
        (lettest ((t 'test-broken))
            (unittest/testcase-run t r wasrun-sut)
            (⊦= '((ran 1) (failed 1 (test-broken (expected useless) (got _)))) (unittest/result-summary r))))
  ((test-unbound-variable tc _ r)
        (lettest ((t 'test-unbound-variable))
            (unittest/testcase-run t r wasrun-sut)
            (⊦= '((ran 1) (failed 1 (test-unbound-variable "unbound variable")))
                (unittest/result-summary r))))
  ((test-failed-result tc _ r)
      (unittest/result-started! r)
      (unittest/result-failed! r 'no-reason)
      (⊦= '((ran 1) (failed 1 no-reason)) (unittest/result-summary r)))
  ((test-suite tc _ r)
    (letsuite ((suite '(test-running test-failed)))
      (unittest/testsuite-run suite r bootstrap-sut)
      (⊦= '((ran 2) (failed 0)) (unittest/result-summary r)))))

(unittest/✓ bootstrap-sut)